/*
 * This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0
 * International License (http://creativecommons.org/licenses/by-nc-nd/4.0/).
 */

package me.yuhuan.network.rpc;

import java.io.*;

/**
 * Created by Yuhuan Jiang on 10/25/14.
 */

/**
 * The basic unit for RPC data transmission. Can be used to hold objects
 * (e.g., {@link me.yuhuan.network.rpc.types.RpcDouble RpcDouble},
 * {@link me.yuhuan.network.rpc.types.RpcArray RpcArray},
 * {@link me.yuhuan.network.rpc.types.RpcMatrix RpcMatrix} ) as a whole,
 * or to hold parts of them.
 * <br /> <br />
 * An RpcData object has the following structure:
 * <br /> <br />
 *     | Transaction ID | # of parts in total | Index of this part (from 0) | Length of the next field | The bytes of this part |
 * <br /> <br />
 * E.g., a matrix can be segmented into parts, and
 *     each one of the segments can be put into one RpcData.
 */
public class RpcData {

    public int transactionId;
    public int numTotalParts;
    public int partId;
    public int contentLength;
    public byte[] content;

    /**
     * Creates an RpcData object.
     * @param transactionId The transaction ID.
     * @param numTotalParts The number of parts in total. This is useful if this RpcData represents only one part of a segmented object.
     * @param partId The index of this part.
     * @param contentLength The length of the content. This is necessary because the parameter {@code content} may contain extra bytes at its end.
     * @param content The bytes of the data.
     */
    public RpcData(int transactionId, int numTotalParts, int partId, int contentLength, byte[] content) {
        this.transactionId = transactionId;
        this.numTotalParts = numTotalParts;
        this.partId = partId;
        this.contentLength = contentLength;
        this.content = content; // did not take care of the extra bytes, because the input should always have no extra bytes.
    }

    /**
     * Creates an RpcData object by bytes. These bytes are usually generated by {@link RpcData#toBytes()} on the sender's side.
     * <br/><br/>
     * The user of this method should not worry about the extra bytes in the parameter {@code bytes},
     * because this method will only take from the given {@code bytes} the first {@code contentLength} bytes.
     * The rest will be just thrown away.
     * @param bytes The bytes to initialize the RpcData object.
     * @throws IOException
     */
    public RpcData(byte[] bytes) throws IOException {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
        DataInputStream inputStream = new DataInputStream(byteArrayInputStream);
        transactionId = inputStream.readInt();
        numTotalParts = inputStream.readInt();
        partId = inputStream.readInt();
        contentLength = inputStream.readInt();
        content = new byte[contentLength];
        inputStream.read(content);
    }

    /**
     * Generates bytes for this RpcData object.
     * This method is usually called before an RpcData object is put into a {@link java.net.DatagramPacket DatagramPacket}.
     * @return The bytes for this RpcData object. Can be put directly into a {@link java.net.DatagramPacket DatagramPacket}.
     * @throws IOException
     */
    public byte[] toBytes() throws IOException {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        DataOutputStream outputStream = new DataOutputStream(byteArrayOutputStream);
        outputStream.writeInt(transactionId);
        outputStream.writeInt(numTotalParts);
        outputStream.writeInt(partId);
        outputStream.writeInt(contentLength);
        outputStream.write(content);
        return byteArrayOutputStream.toByteArray();
    }
}
